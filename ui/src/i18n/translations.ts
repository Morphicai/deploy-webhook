export const translations = {
  en: {
    common: {
      loading: 'Loading...',
      save: 'Save',
      cancel: 'Cancel',
      delete: 'Delete',
      edit: 'Edit',
      create: 'Create',
      search: 'Search',
      confirm: 'Confirm',
      back: 'Back',
      next: 'Next',
      submit: 'Submit',
      refresh: 'Refresh',
      settings: 'Settings',
      logout: 'Sign Out',
    },
    nav: {
      dashboard: 'Dashboard',
      applications: 'Applications',
      environment: 'Environment',
      secrets: 'Secrets',
      repositories: 'Repositories',
      apiKeys: 'API Keys',
      mcpSetup: 'MCP Setup',
      settings: 'Settings',
      docs: 'Documentation',
    },
    auth: {
      login: 'Sign In',
      register: 'Sign Up',
      email: 'Email',
      password: 'Password',
      confirmPassword: 'Confirm Password',
      loginTitle: 'Sign in to your account',
      registerTitle: 'Create your account',
      loginButton: 'Sign In',
      registerButton: 'Sign Up',
      noAccount: "Don't have an account?",
      hasAccount: 'Already have an account?',
      loginSuccess: 'Login successful',
      registerSuccess: 'Registration successful',
    },
    dashboard: {
      title: 'Dashboard',
      analytics: 'Analytics',
      overview: 'Overview',
      applications: 'Applications',
      deployments: 'Deployments',
      recentActivity: 'Recent Activity',
      totalApps: 'Total Applications',
      activeDeployments: 'Active Deployments',
      totalSecrets: 'Total Secrets',
      envVariables: 'Environment Variables',
    },
    applications: {
      title: 'Applications',
      name: 'Name',
      version: 'Version',
      status: 'Status',
      port: 'Port',
      deployedAt: 'Deployed At',
      actions: 'Actions',
      noApplications: 'No applications found',
      deploy: 'Deploy',
      deployTitle: 'Deploy Application',
      repo: 'Repository',
      containerPort: 'Container Port',
      deploySuccess: 'Application deployed successfully',
    },
    environment: {
      title: 'Environment Variables',
      scope: 'Scope',
      key: 'Key',
      value: 'Value',
      projectName: 'Project Name',
      global: 'Global',
      project: 'Project',
      addVariable: 'Add Variable',
      editVariable: 'Edit Variable',
      deleteConfirm: 'Are you sure you want to delete this variable?',
      createSuccess: 'Variable created successfully',
      updateSuccess: 'Variable updated successfully',
      deleteSuccess: 'Variable deleted successfully',
    },
    secrets: {
      title: 'Secrets',
      name: 'Name',
      type: 'Type',
      provider: 'Provider',
      addSecret: 'Add Secret',
      editSecret: 'Edit Secret',
      deleteConfirm: 'Are you sure you want to delete this secret?',
      createSuccess: 'Secret created successfully',
      updateSuccess: 'Secret updated successfully',
      deleteSuccess: 'Secret deleted successfully',
      infisical: 'Infisical',
      env: 'Environment Variable',
    },
    docs: {
      title: 'Documentation',
      apiDocs: 'API Documentation',
      viewSwagger: 'View Swagger Docs',
    },
    repositories: {
      title: 'Image Repositories',
      description: 'Manage Docker image registries and authentication',
      addRepository: 'Add Repository',
      editRepository: 'Edit Repository',
      formDescription: 'Configure image registry credentials for pulling Docker images',
      listTitle: 'All Repositories',
      listDescription: 'Manage your image registries with authentication',
      name: 'Name',
      registry: 'Registry URL',
      authType: 'Auth Type',
      username: 'Username',
      password: 'Password',
      token: 'Access Token',
      status: 'Status',
      actions: 'Actions',
      default: 'Default',
      setAsDefault: 'Set as Default',
      authenticated: 'Authenticated',
      public: 'Public',
      deleteConfirm: 'Are you sure you want to delete this repository? This cannot be undone.',
      noRepositories: 'No repositories found. Add your first repository to get started.',
      passwordPlaceholder: 'Leave empty to keep current password',
      tokenPlaceholder: 'Leave empty to keep current token',
      authTypes: {
        none: 'No Authentication',
        usernamePassword: 'Username & Password',
        token: 'Access Token',
      },
      quickConfig: {
        title: 'Quick Configuration',
        description: 'Common registry configurations',
        dockerHub: 'Official Docker Hub registry',
        aliyun: 'Aliyun Container Registry (China)',
        gcr: 'Google Container Registry',
      },
    },
    settings: {
      title: 'System Settings',
      description: 'Manage system configuration and Infisical Webhook integration',
      infisical: {
        title: 'Infisical Webhook Configuration',
        description: 'Configure Infisical Webhook for automatic secret synchronization (second-level response)',
        webhookSecret: 'Webhook Secret Key',
        secretPlaceholder: 'Enter or generate a new secret',
        generate: 'Generate New Secret',
        copy: 'Copy',
        secretHint: 'This secret is used to verify the authenticity of Infisical Webhook requests. Keep it safe!',
        setupSteps: {
          title: 'Setup Steps:',
          step1: 'Add the secret to environment variables:',
          step2: 'Restart Deploy Webhook service',
          step3: 'Add Webhook URL in Infisical project settings:',
          step4: 'Enter the same secret',
          step5: 'Select events: secret.created, secret.updated, secret.deleted',
        },
        tip: {
          title: 'Tip',
          content: 'Webhook approach has lower latency (second-level vs 5 minutes) and less resource consumption (saves 96% API calls) compared to polling. Highly recommended!',
        },
        openInfisical: 'Open Infisical',
        viewDocs: 'View Documentation',
      },
      system: {
        title: 'System Information',
        description: 'Server configuration and endpoint information',
        serverUrl: 'Server URL',
        webhookEndpoint: 'Webhook Endpoint',
      },
    },
  },
  zh: {
    common: {
      loading: '加载中...',
      save: '保存',
      cancel: '取消',
      delete: '删除',
      edit: '编辑',
      create: '创建',
      search: '搜索',
      confirm: '确认',
      back: '返回',
      next: '下一步',
      submit: '提交',
      refresh: '刷新',
      settings: '设置',
      logout: '退出登录',
    },
  nav: {
    dashboard: '仪表板',
    applications: '应用管理',
    environment: '环境变量',
    secrets: '密钥管理',
    repositories: '镜像仓库',
    apiKeys: 'API 密钥',
    mcpSetup: 'MCP 配置',
    settings: '系统设置',
    docs: '文档',
  },
    auth: {
      login: '登录',
      register: '注册',
      email: '邮箱',
      password: '密码',
      confirmPassword: '确认密码',
      loginTitle: '登录您的账户',
      registerTitle: '创建您的账户',
      loginButton: '登录',
      registerButton: '注册',
      noAccount: '还没有账户？',
      hasAccount: '已有账户？',
      loginSuccess: '登录成功',
      registerSuccess: '注册成功',
    },
    dashboard: {
      title: '仪表板',
      analytics: '数据分析',
      overview: '概览',
      applications: '应用',
      deployments: '部署',
      recentActivity: '最近活动',
      totalApps: '应用总数',
      activeDeployments: '活跃部署',
      totalSecrets: '密钥总数',
      envVariables: '环境变量',
    },
    applications: {
      title: '应用管理',
      name: '名称',
      version: '版本',
      status: '状态',
      port: '端口',
      deployedAt: '部署时间',
      actions: '操作',
      noApplications: '暂无应用',
      deploy: '部署',
      deployTitle: '部署应用',
      repo: '仓库',
      containerPort: '容器端口',
      deploySuccess: '应用部署成功',
    },
    environment: {
      title: '环境变量',
      scope: '作用域',
      key: '键',
      value: '值',
      projectName: '项目名称',
      global: '全局',
      project: '项目',
      addVariable: '添加变量',
      editVariable: '编辑变量',
      deleteConfirm: '确定要删除此变量吗？',
      createSuccess: '变量创建成功',
      updateSuccess: '变量更新成功',
      deleteSuccess: '变量删除成功',
    },
    secrets: {
      title: '密钥管理',
      name: '名称',
      type: '类型',
      provider: '提供商',
      addSecret: '添加密钥',
      editSecret: '编辑密钥',
      deleteConfirm: '确定要删除此密钥吗？',
      createSuccess: '密钥创建成功',
      updateSuccess: '密钥更新成功',
      deleteSuccess: '密钥删除成功',
      infisical: 'Infisical',
      env: '环境变量',
    },
    docs: {
      title: '文档',
      apiDocs: 'API 文档',
      viewSwagger: '查看 Swagger 文档',
    },
    repositories: {
      title: '镜像仓库',
      description: '管理 Docker 镜像仓库和认证凭证',
      addRepository: '添加仓库',
      editRepository: '编辑仓库',
      formDescription: '配置镜像仓库凭证以拉取 Docker 镜像',
      listTitle: '所有仓库',
      listDescription: '管理您的镜像仓库和认证信息',
      name: '名称',
      registry: '仓库地址',
      authType: '认证类型',
      username: '用户名',
      password: '密码',
      token: '访问令牌',
      status: '状态',
      actions: '操作',
      default: '默认',
      setAsDefault: '设为默认',
      authenticated: '已认证',
      public: '公开',
      deleteConfirm: '确定要删除此仓库吗？此操作无法撤销。',
      noRepositories: '暂无仓库。添加您的第一个仓库以开始使用。',
      passwordPlaceholder: '留空以保持当前密码',
      tokenPlaceholder: '留空以保持当前令牌',
      authTypes: {
        none: '无需认证',
        usernamePassword: '用户名和密码',
        token: '访问令牌',
      },
      quickConfig: {
        title: '快速配置',
        description: '常用仓库配置',
        dockerHub: 'Docker Hub 官方镜像仓库',
        aliyun: '阿里云容器镜像服务（中国）',
        gcr: 'Google 容器镜像仓库',
      },
    },
    settings: {
      title: '系统设置',
      description: '管理系统配置和 Infisical Webhook 集成',
      infisical: {
        title: 'Infisical Webhook 配置',
        description: '配置 Infisical Webhook 实现密钥自动同步（秒级响应）',
        webhookSecret: 'Webhook 安全密钥',
        secretPlaceholder: '输入或生成新的密钥',
        generate: '生成新密钥',
        copy: '复制',
        secretHint: '这个密钥用于验证 Infisical Webhook 请求的真实性。请妥善保管！',
        setupSteps: {
          title: '配置步骤：',
          step1: '将密钥添加到环境变量：',
          step2: '重启 Deploy Webhook 服务',
          step3: '在 Infisical 项目设置中添加 Webhook URL：',
          step4: '填入相同的密钥',
          step5: '选择事件：secret.created, secret.updated, secret.deleted',
        },
        tip: {
          title: '提示',
          content: 'Webhook 方案比轮询方案延迟更低（秒级响应 vs 5分钟），资源消耗更少（节省96% API调用）。强烈推荐！',
        },
        openInfisical: '打开 Infisical',
        viewDocs: '查看文档',
      },
      system: {
        title: '系统信息',
        description: '服务器配置和端点信息',
        serverUrl: '服务器地址',
        webhookEndpoint: 'Webhook 端点',
      },
    },
  },
};

export type Language = keyof typeof translations;
export type TranslationKeys = typeof translations.en;

