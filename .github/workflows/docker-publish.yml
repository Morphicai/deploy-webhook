name: Publish Docker image

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  workflow_dispatch:

jobs:
  test:
    name: Build and smoke-test image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install deps and build TS
        run: |
          npm ci
          npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image (linux/amd64) for test
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          load: true
          platforms: linux/amd64
          tags: focusbe/deploy-webhook:test-${{ github.sha }}

      - name: Run container
        run: |
          docker run -d --name deploy-webhook-test -p 9000:9000 \
            -e WEBHOOK_SECRET=test \
            -e REGISTRY_HOST=registry.example.com \
            focusbe/deploy-webhook:test-${{ github.sha }}

      - name: Wait for health
        run: |
          for i in {1..20}; do \
            curl -fsS http://localhost:9000/health && break || sleep 1; \
          done

      - name: Curl health
        run: curl -f http://localhost:9000/health

      - name: Cleanup container
        if: always()
        run: |
          docker rm -f deploy-webhook-test || true

  docker:
    name: Build and publish
    runs-on: ubuntu-latest
    needs: [test]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            docker.io/focusbe/deploy-webhook
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=sha,format=short
            type=ref,event=tag

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sync Docker Hub README (curl with logs)
        if: ${{ github.event_name != 'pull_request' }}
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          REPO: focusbe/deploy-webhook
          README_PATH: README.md
        run: |
          set -euo pipefail
          echo "Reading description source from ${README_PATH}"
          if [ ! -f "${README_PATH}" ]; then
            echo "::error::README not found at ${README_PATH}"
            exit 1
          fi
          if ! command -v jq >/dev/null 2>&1; then
            echo "jq not found, installing..."
            sudo apt-get update -y && sudo apt-get install -y jq
          fi
          echo "README bytes: $(wc -c < "${README_PATH}")"
          DESC_JSON=$(jq -Rs . < "${README_PATH}")
          echo "Acquiring Docker Hub JWT"
          LOGIN_RESP=$(curl -fsS -X POST https://hub.docker.com/v2/users/login/ \
            -H "Content-Type: application/json" \
            -d "{\"username\":\"${DOCKERHUB_USERNAME}\",\"password\":\"${DOCKERHUB_TOKEN}\"}" || true)
          if [ -z "${LOGIN_RESP}" ]; then
            echo "::error::Login failed: empty response"
            exit 1
          fi
          TOKEN=$(echo "${LOGIN_RESP}" | jq -r '.token // empty')
          if [ -z "${TOKEN}" ]; then
            echo "::error::Login failed, response:"
            echo "${LOGIN_RESP}"
            exit 1
          fi
          echo "Token acquired (length: ${#TOKEN})"
          echo "Sending PATCH to update full_description for ${REPO}"
          RESP_FILE=$(mktemp)
          HTTP_CODE=$(curl -sS -o "${RESP_FILE}" -w "%{http_code}" -X PATCH "https://hub.docker.com/v2/repositories/${REPO}/" \
            -H "Content-Type: application/json" \
            -H "Authorization: JWT ${TOKEN}" \
            --data "{\"full_description\": ${DESC_JSON}}")
          echo "HTTP ${HTTP_CODE}"
          echo "Response body:"
          cat "${RESP_FILE}" || true
          if [ "${HTTP_CODE}" -ge 200 ] && [ "${HTTP_CODE}" -lt 300 ]; then
            echo "Docker Hub description synced successfully."
          else
            echo "::error::Failed to sync description"
            exit 1
          fi
          rm -f "${RESP_FILE}"


